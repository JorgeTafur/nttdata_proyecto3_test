/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.proyecto3.api;

import com.nttdata.proyecto3.model.CustomerRequest;
import com.nttdata.proyecto3.model.CustomerResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-11T18:26:48.386130600-05:00[America/Lima]")
@Validated
@Api(value = "clientes", description = "the clientes API")
public interface ClientesApi {

    default ClientesApiDelegate getDelegate() {
        return new ClientesApiDelegate() {};
    }

    /**
     * DELETE /clientes/{id} : Eliminar cliente por su ID
     *
     * @param id  (required)
     * @return Cliente eliminado (status code 204)
     *         or Error al eliminar el cliente (status code 200)
     */
    @ApiOperation(value = "Eliminar cliente por su ID", nickname = "deleteCustomerById", notes = "", tags={ "cliente", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Cliente eliminado"),
        @ApiResponse(code = 200, message = "Error al eliminar el cliente") })
    @DeleteMapping(
        value = "/clientes/{id}"
    )
    default ResponseEntity<Void> deleteCustomerById(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getDelegate().deleteCustomerById(id);
    }


    /**
     * GET /clientes/{id} : Obtener datos de un cliente
     *
     * @param id  (required)
     * @return Cliente obtenido exitosamente (status code 200)
     *         or Error en obtener datos del cliente (status code 200)
     */
    @ApiOperation(value = "Obtener datos de un cliente", nickname = "getCustomerById", notes = "", response = CustomerResponse.class, tags={ "cliente", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cliente obtenido exitosamente", response = CustomerResponse.class),
        @ApiResponse(code = 200, message = "Error en obtener datos del cliente") })
    @GetMapping(
        value = "/clientes/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CustomerResponse> getCustomerById(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        return getDelegate().getCustomerById(id);
    }


    /**
     * GET /clientes : Listar clientes
     *
     * @return Lista de clientes (status code 200)
     *         or Error en la obtenci贸n de clientes (status code 200)
     */
    @ApiOperation(value = "Listar clientes", nickname = "listCustomers", notes = "", response = CustomerResponse.class, responseContainer = "List", tags={ "cliente", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista de clientes", response = CustomerResponse.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Error en la obtenci贸n de clientes") })
    @GetMapping(
        value = "/clientes",
        produces = { "application/json" }
    )
    default ResponseEntity<List<CustomerResponse>> listCustomers() {
        return getDelegate().listCustomers();
    }


    /**
     * POST /clientes : Crear un cliente
     *
     * @param customerRequest Registrar un cliente (required)
     * @return Cliente registrado exitosamente (status code 200)
     *         or Error en la creacion de cliente (status code 200)
     */
    @ApiOperation(value = "Crear un cliente", nickname = "registerCustomer", notes = "", response = CustomerResponse.class, tags={ "cliente", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cliente registrado exitosamente", response = CustomerResponse.class),
        @ApiResponse(code = 200, message = "Error en la creacion de cliente") })
    @PostMapping(
        value = "/clientes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CustomerResponse> registerCustomer(@ApiParam(value = "Registrar un cliente" ,required=true )  @Valid @RequestBody CustomerRequest customerRequest) {
        return getDelegate().registerCustomer(customerRequest);
    }


    /**
     * PUT /clientes/{id} : Actualizar un cliente
     *
     * @param id  (required)
     * @param customerRequest Detalles del cliente actualizada (required)
     * @return Cliente actualizado exitosamente (status code 200)
     *         or Error en la actualizaci贸n de cliente (status code 200)
     */
    @ApiOperation(value = "Actualizar un cliente", nickname = "updateCustomer", notes = "", response = CustomerResponse.class, tags={ "cliente", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cliente actualizado exitosamente", response = CustomerResponse.class),
        @ApiResponse(code = 200, message = "Error en la actualizaci贸n de cliente") })
    @PutMapping(
        value = "/clientes/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CustomerResponse> updateCustomer(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "Detalles del cliente actualizada" ,required=true )  @Valid @RequestBody CustomerRequest customerRequest) {
        return getDelegate().updateCustomer(id, customerRequest);
    }

}
